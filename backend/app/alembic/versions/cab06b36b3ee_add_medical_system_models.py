"""Add medical system models

Revision ID: cab06b36b3ee
Revises: cc9771d66d8a
Create Date: 2025-06-20 23:14:27.351545

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'cab06b36b3ee'
down_revision: Union[str, None] = 'cc9771d66d8a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('medications',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('generic_name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('manufacturer', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('drug_class', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('contraindications', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('side_effects', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('interactions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notifications',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('notification_type', sa.Enum('MEDICATION_REMINDER', 'APPOINTMENT_REMINDER', 'TEST_RESULT', 'GENERAL', name='notificationtype'), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('message', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('scheduled_for', sa.DateTime(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SENT', 'DELIVERED', 'FAILED', 'READ', name='notificationstatus'), nullable=False),
    sa.Column('delivery_method', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('related_entity_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('related_entity_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('appointments',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('doctor_id', sa.Uuid(), nullable=False),
    sa.Column('appointment_date', sa.DateTime(), nullable=False),
    sa.Column('duration_minutes', sa.Integer(), nullable=False),
    sa.Column('appointment_type', sa.Enum('CONSULTATION', 'FOLLOW_UP', 'CHECKUP', 'EMERGENCY', 'VIRTUAL', name='appointmenttype'), nullable=False),
    sa.Column('status', sa.Enum('SCHEDULED', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW', name='appointmentstatus'), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('prescription_given', sa.Boolean(), nullable=False),
    sa.Column('follow_up_required', sa.Boolean(), nullable=False),
    sa.Column('follow_up_date', sa.DateTime(), nullable=True),
    sa.Column('meeting_link', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('meeting_id', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('consultation_fee', sa.Float(), nullable=True),
    sa.Column('payment_status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctor_profiles.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patient_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('health_metrics',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('metric_type', sa.Enum('BLOOD_PRESSURE', 'HEART_RATE', 'TEMPERATURE', 'WEIGHT', 'HEIGHT', 'BMI', 'BLOOD_SUGAR', 'OXYGEN_SATURATION', name='vitaltype'), nullable=False),
    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('unit', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('recorded_at', sa.DateTime(), nullable=False),
    sa.Column('recorded_by', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('normal_min', sa.Float(), nullable=True),
    sa.Column('normal_max', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patient_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('medical_conditions',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('condition_type', sa.Enum('MEDICAL_CONDITION', 'ALLERGY', name='conditiontype'), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'RESOLVED', 'MONITORING', 'INACTIVE', name='conditionstatus'), nullable=False),
    sa.Column('diagnosed_date', sa.DateTime(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('severity', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('treatment', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('allergy_severity', sa.Enum('MILD', 'MODERATE', 'SEVERE', 'LIFE_THREATENING', name='allergyseverity'), nullable=True),
    sa.Column('reaction', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patient_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('medical_records',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('doctor_id', sa.Uuid(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('category', sa.Enum('CHECKUP', 'LAB_RESULT', 'IMAGING', 'SPECIALIST', 'VACCINATION', 'PRESCRIPTION', 'EMERGENCY', name='recordcategory'), nullable=False),
    sa.Column('record_date', sa.DateTime(), nullable=False),
    sa.Column('facility', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('summary', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('diagnosis', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('symptoms', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('treatment_summary', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='priority'), nullable=False),
    sa.Column('tags', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctor_profiles.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patient_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('appointment_reminders',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('appointment_id', sa.Uuid(), nullable=False),
    sa.Column('reminder_time', sa.DateTime(), nullable=False),
    sa.Column('reminder_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('is_sent', sa.Boolean(), nullable=False),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('medical_attachments',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('medical_record_id', sa.Uuid(), nullable=False),
    sa.Column('filename', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('original_filename', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('file_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('content_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.ForeignKeyConstraint(['medical_record_id'], ['medical_records.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('prescriptions',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('doctor_id', sa.Uuid(), nullable=False),
    sa.Column('medication_id', sa.Uuid(), nullable=False),
    sa.Column('appointment_id', sa.Uuid(), nullable=True),
    sa.Column('dosage', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('frequency', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('quantity', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('instructions', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('prescribed_date', sa.DateTime(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'COMPLETED', 'DISCONTINUED', name='prescriptionstatus'), nullable=False),
    sa.Column('diagnosis', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointments.id'], ),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctor_profiles.id'], ),
    sa.ForeignKeyConstraint(['medication_id'], ['medications.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patient_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('medication_logs',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('prescription_id', sa.Uuid(), nullable=False),
    sa.Column('taken_at', sa.DateTime(), nullable=False),
    sa.Column('dosage_taken', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('side_effects_experienced', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.ForeignKeyConstraint(['prescription_id'], ['prescriptions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('medication_logs')
    op.drop_table('prescriptions')
    op.drop_table('medical_attachments')
    op.drop_table('appointment_reminders')
    op.drop_table('medical_records')
    op.drop_table('medical_conditions')
    op.drop_table('health_metrics')
    op.drop_table('appointments')
    op.drop_table('notifications')
    op.drop_table('medications')
    # ### end Alembic commands ###
